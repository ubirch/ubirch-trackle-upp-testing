package com.ubirch

import com.ubirch.protocol.codec.{MsgPackProtocolDecoder, MsgPackProtocolEncoder, MsgPackProtocolSigning}
import com.ubirch.protocol.ProtocolMessage
import com.fasterxml.jackson.databind.node.BinaryNode
import org.apache.commons.codec.binary.Hex
import com.ubirch.client.protocol.DefaultProtocolVerifier
import com.ubirch.crypto.GeneratorKeyFactory
import com.ubirch.crypto.utils.Curve

import java.security.MessageDigest
import java.util.{Base64, UUID}

object Experiment {
  def main(args: Array[String]): Unit = {
    val msgPack: String  = "96cd0013b032769126bcae8592cd5c7bbd03214ea9da0040c4717e78c1b738b3ad8a17c7f799edc261513a095bd231b0213698d448396e960536189abc56f4a9cc4c0619a4b59be7dd455066e890a78261df4120a5646a055495da002376312e302e322d50524f442d3230313830333236313033323035202876352e362e3629ce0002e4a403de01d0ce60341c35cd0e0ace60341c71cd0e10ce60341cadcd0e15ce60341ce9cd0e18ce60341d25cd0e1ece60341d61cd0e21ce60341d9dcd0e25ce60341dd9cd0e27ce60341e15cd0e29ce60341e51cd0e2cce60341e8dcd0e2fce60341ec9cd0e31ce60341f05cd0e35ce60341f41cd0e34ce60341f7dcd0e36ce60341fb9cd0e38ce60341ff5cd0e39ce60342031cd0e37ce6034206dcd0e3cce603420a9cd0e3ece603420e5cd0e40ce60342121cd0e3ece6034215dcd0e3cce60342199cd0e3dce603421d5cd0e40ce60342211cd0e42ce6034224dcd0e3fce60342289cd0e3ece603422c5cd0e41ce60342301cd0e42ce6034233dcd0e40ce60342379cd0e43ce603423b5cd0e44ce603423f1cd0e45ce6034242dcd0e46ce60342469cd0e47ce603424a5cd0e46ce603424e1cd0e47ce6034251dcd0e48ce60342559cd0e48ce60342595cd0e48ce603425d1cd0e4ace6034260dcd0e4ace60342649cd0e4bce60342685cd0e4cce603426c1cd0e4cce603426fdcd0e4bce60342739cd0e4dce60342775cd0e4ece603427b1cd0e4dce603427edcd0e4cce60342829cd0e4dce60342865cd0e4ece603428a1cd0e4fce603428ddcd0e50ce60342919cd0e52ce60342955cd0e4fce60342991cd0e52ce603429cdcd0e50ce60342a09cd0e52ce60342a45cd0e51ce60342a81cd0e51ce60342abdcd0e52ce60342af9cd0e50ce60342b35cd0e52ce60342b71cd0e51ce60342badcd0e52ce60342be9cd0e53ce60342c25cd0e52ce60342c61cd0e54ce60342c9dcd0e54ce60342cd9cd0e57ce60342d15cd0e56ce60342d51cd0e56ce60342d8dcd0e55ce60342dc9cd0e56ce60342e05cd0e56ce60342e41cd0e55ce60342e7dcd0e56ce60342eb9cd0e55ce60342ef5cd0e54ce60342f31cd0e56ce60342f6dcd0e59ce60342fa9cd0e57ce60342fe5cd0e59ce60343021cd0e5cce6034305dcd0e5ace60343099cd0e59ce603430d5cd0e5ace60343111cd0e5bce6034314dcd0e5bce60343189cd0e5cce603431c5cd0e5cce60343201cd0e5bce6034323dcd0e5cce60343279cd0e5dce603432b5cd0e5dce603432f1cd0e5bce6034332dcd0e5dce60343369cd0e5dce603433a5cd0e5cce603433e1cd0e5ece6034341dcd0e5dce60343459cd0e5dce60343495cd0e5ece603434d1cd0e5dce6034350dcd0e5dce60343549cd0e5fce60343585cd0e5ece603435c1cd0e5ece603435fdcd0e5ece60343639cd0e5fce60343675cd0e5dce603436b1cd0e60ce603436edcd0e61ce60343729cd0e5ece60343765cd0e60ce603437a1cd0e61ce603437ddcd0e61ce60343819cd0e61ce60343855cd0e60ce60343891cd0e5fce603438cdcd0e61ce60343909cd0e61ce60343945cd0e61ce60343981cd0e61ce603439bdcd0e61ce603439f9cd0e61ce60343a35cd0e62ce60343a71cd0e62ce60343aadcd0e61ce60343ae9cd0e61ce60343b25cd0e61ce60343b61cd0e61ce60343b9dcd0e62ce60343bd9cd0e60ce60343c15cd0e60ce60343c51cd0e60ce60343c8dcd0e61ce60343cc9cd0e61ce60343d05cd0e60ce60343d41cd0e60ce60343d7dcd0e5ece60343db9cd0e5dce60343df5cd0e5fce60343e31cd0e5cce60343e6dcd0e5dce60343ea9cd0e5cce60343ee5cd0e5cce60343f21cd0e5cce60343f5dcd0e5bce60343f99cd0e5bce60343fd5cd0e5bce60344011cd0e59ce6034404dcd0e5bce60344089cd0e57ce603440c5cd0e5ace60344101cd0e59ce6034413dcd0e59ce60344179cd0e5ace603441b5cd0e59ce603441f1cd0e56ce6034422dcd0e57ce60344269cd0e57ce603442a5cd0e59ce603442e1cd0e59ce6034431dcd0e59ce60344359cd0e59ce60344395cd0e57ce603443d1cd0e57ce6034440dcd0e57ce60344449cd0e56ce60344485cd0e57ce603444c1cd0e59ce603444fdcd0e54ce60344539cd0e56ce60344575cd0e55ce603445b1cd0e56ce603445edcd0e54ce60344629cd0e54ce60344665cd0e56ce603446a1cd0e54ce603446ddcd0e54ce60344719cd0e55ce60344755cd0e55ce60344791cd0e56ce603447cdcd0e56ce60344809cd0e55ce60344845cd0e56ce60344881cd0e54ce603448bdcd0e56ce603448f9cd0e55ce60344935cd0e55ce60344971cd0e54ce603449adcd0e53ce603449e9cd0e53ce60344a25cd0e56ce60344a61cd0e54ce60344a9dcd0e51ce60344ad9cd0e52ce60344b15cd0e53ce60344b51cd0e54ce60344b8dcd0e53ce60344bc9cd0e54ce60344c05cd0e53ce60344c41cd0e52ce60344c7dcd0e52ce60344cb9cd0e53ce60344cf5cd0e52ce60344d31cd0e51ce60344d6dcd0e51ce60344da9cd0e51ce60344de5cd0e51ce60344e21cd0e50ce60344e5dcd0e50ce60344e99cd0e50ce60344ed5cd0e4fce60344f11cd0e50ce60344f4dcd0e50ce60344f89cd0e52ce60344fc5cd0e50ce60345001cd0e4fce6034503dcd0e4fce60345079cd0e51ce603450b5cd0e50ce603450f1cd0e51ce6034512dcd0e52ce60345169cd0e52ce603451a5cd0e53ce603451e1cd0e53ce6034521dcd0e52ce60345259cd0e52ce60345295cd0e54ce603452d1cd0e51ce6034530dcd0e52ce60345349cd0e52ce60345385cd0e54ce603453c1cd0e50ce603453fdcd0e51ce60345439cd0e50ce60345475cd0e51ce603454b1cd0e50ce603454edcd0e51ce60345529cd0e51ce60345565cd0e50ce603455a1cd0e4ece603455ddcd0e4dce60345619cd0e4ece60345655cd0e4ece60345691cd0e4fce603456cdcd0e4dce60345709cd0e4ece60345745cd0e4dce60345781cd0e4ece603457bdcd0e4ece603457f9cd0e4dce60345835cd0e4cce60345871cd0e4bce603458adcd0e4cce603458e9cd0e4ece60345925cd0e4dce60345961cd0e4dce6034599dcd0e4cce603459d9cd0e4ace60345a15cd0e4ace60345a51cd0e47ce60345a8dcd0e46ce60345ac9cd0e47ce60345b05cd0e4ace60345b41cd0e47ce60345b7dcd0e48ce60345bb9cd0e44ce60345bf5cd0e47ce60345c31cd0e47ce60345c6dcd0e45ce60345ca9cd0e45ce60345ce5cd0e44ce60345d21cd0e45ce60345d5dcd0e45ce60345d99cd0e44ce60345dd5cd0e44ce60345e11cd0e44ce60345e4dcd0e44ce60345e89cd0e42ce60345ec5cd0e44ce60345f01cd0e42ce60345f3dcd0e45ce60345f79cd0e42ce60345fb5cd0e44ce60345ff1cd0e44ce6034602dcd0e42ce60346069cd0e44ce603460a5cd0e45ce603460e1cd0e45ce6034611dcd0e45ce60346159cd0e45ce60346195cd0e45ce603461d1cd0e44ce6034620dcd0e45ce60346249cd0e45ce60346285cd0e44ce603462c1cd0e44ce603462fdcd0e45ce60346339cd0e45ce60346375cd0e44ce603463b1cd0e45ce603463edcd0e42ce60346429cd0e44ce60346465cd0e42ce603464a1cd0e44ce603464ddcd0e44ce60346519cd0e45ce60346555cd0e45ce60346591cd0e40ce603465cdcd0e42ce60346609cd0e43ce60346645cd0e43ce60346681cd0e42ce603466bdcd0e40ce603466f9cd0e42ce60346735cd0e42ce60346771cd0e42ce603467adcd0e41ce603467e9cd0e41ce60346825cd0e43ce60346861cd0e3fce6034689dcd0e3ece603468d9cd0e3ece60346915cd0e3dce60346951cd0e3cce6034698dcd0e3cce603469c9cd0e3ece60346a05cd0e3dce60346a41cd0e3ece60346a7dcd0e3fce60346ab9cd0e3dce60346af5cd0e3ece60346b31cd0e3ece60346b6dcd0e3dce60346ba9cd0e3dce60346be5cd0e3ece60346c21cd0e3ece60346c5dcd0e3ece60346c99cd0e3ece60346cd5cd0e3dce60346d11cd0e3dce60346d4dcd0e3dce60346d89cd0e3dce60346dc5cd0e3dce60346e01cd0e3ece60346e3dcd0e3ece60346e79cd0e3fce60346eb5cd0e40ce60346ef1cd0e40ce60346f2dcd0e42ce60346f69cd0e3fce60346fa5cd0e41ce60346fe1cd0e42ce6034701dcd0e3fce60347059cd0e40ce60347095cd0e3ece603470d1cd0e41ce6034710dcd0e3ece60347149cd0e3dce60347185cd0e3cce603471c1cd0e3ece603471fdcd0e3dce60347239cd0e3ece60347275cd0e3ece603472b1cd0e3ece603472edcd0e3ece60347329cd0e41ce60347365cd0e3ece603473a1cd0e3fce603473ddcd0e3fce60347419cd0e3fce60347455cd0e3ece60347491cd0e40ce603474cdcd0e3dce60347509cd0e3ece60347545cd0e3ece60347581cd0e3dce603475bdcd0e3dce603475f9cd0e3cce60347635cd0e3dce60347671cd0e3dce603476adcd0e3dce603476e9cd0e3cce60347725cd0e3cce60347761cd0e3ece6034779dcd0e3dce603477d9cd0e3dce60347815cd0e3ece60347851cd0e3ece6034788dcd0e3fce603478c9cd0e3ece60347905cd0e3ece60347941cd0e40ce6034797dcd0e40ce603479b9cd0e3fce603479f5cd0e3fce60347a31cd0e3ece60347a6dcd0e3ece60347aa9cd0e3fce60347ae5cd0e3ece60347b21cd0e3fce60347b5dcd0e3dce60347b99cd0e3fce60347bd5cd0e3dce60347c11cd0e3ece60347c4dcd0e3fce60347c89cd0e3ece60347cc5cd0e3dce60347d01cd0e40ce60347d3dcd0e3fce60347d79cd0e41ce60347db5cd0e40ce60347df1cd0e41ce60347e2dcd0e42ce60347e69cd0e41ce60347ea5cd0e40ce60347ee1cd0e41ce60347f1dcd0e42ce60347f59cd0e40ce60347f95cd0e41ce60347fd1cd0e41ce6034800dcd0e42ce60348049cd0e41ce60348085cd0e42ce603480c1cd0e42ce603480fdcd0e41ce60348139cd0e41ce60348175cd0e44ce603481b1cd0e40ce603481edcd0e40ce60348229cd0e40ce60348265cd0e3fce603482a1cd0e42ce603482ddcd0e40ce60348319cd0e41ce60348355cd0e41ce60348391cd0e40ce603483cdcd0e40ce60348409cd0e42ce60348445cd0e42ce60348481cd0e3fce603484bdcd0e44ce603484f9cd0e41ce60348535cd0e43ce60348571cd0e42ce603485adcd0e42ce603485e9cd0e43ce60348625cd0e43ce60348661cd0e43ce6034869dcd0e41ce603486d9cd0e41ce60348715cd0e42ce60348751cd0e40ce6034878dcd0e42ce603487c9cd0e41ce60348805cd0e40ce60348841cd0e40ce6034887dcd0e3ece603488b9cd0e4084a36d696ecd0daca36d6178cd1068a169cdea60a2696cce001b7740da00406e29d4be6ed312e87e1583da8fe71fd5a6e5f7e13f6bd5f5c7cb55b8112e0138ec5d2ab9ef723d63afa9da3f68d0b32fdc5e7d26ab1c2aabed8ce87d6fa80d08"
    val msgPackByteArray = Hex.decodeHex(msgPack)
    val decorder = MsgPackProtocolDecoder.getDecoder()
    val protocolMessage = decorder.decode(msgPackByteArray)

    println("-----------original protocol message-----------")

    println(s"${protocolMessage}\n")

    println("-----------new protocol message-----------")

    val newProtocolMessage = createNewProtocolMessage(protocolMessage)

    println(s"${newProtocolMessage}\n")

    println("-----------verification result of new protocol message-----------")

    val verificationResultOfNewPM = Verifier.execute("eu+746GzQyj/bJaEWvOJ1eMmxD4S288xoyd1ZGnJogA=", newProtocolMessage)
    println(s"${verificationResultOfNewPM}\n")

    val encoder = MsgPackProtocolEncoder.getEncoder()
    val newMsgpackByteArray = encoder.encode(newProtocolMessage)

    println("-----------verification result of new msgPack-----------")

    val verificationResultOfNewMsgPack = Verifier.execute("eu+746GzQyj/bJaEWvOJ1eMmxD4S288xoyd1ZGnJogA=", newProtocolMessage.getUUID, newMsgpackByteArray)
    println(s"${verificationResultOfNewMsgPack}\n")

    val newMsgPack = Hex.encodeHex(newMsgpackByteArray)
    val newProtocolMessage1 = decorder.decode(Hex.decodeHex(newMsgPack))

    println("-----------new protocol message-----------")
    println(s"${newProtocolMessage1}\n")
  }

  def createNewProtocolMessage(pm: ProtocolMessage): ProtocolMessage = {
    val newProcotolMessage = new ProtocolMessage()

    val CHAINEDMESSAGE = 35
    newProcotolMessage.setUUID(pm.getUUID)
    newProcotolMessage.setHint(pm.getHint)
    newProcotolMessage.setChain(pm.getChain)
    newProcotolMessage.setSigned(pm.getSigned)
    newProcotolMessage.setVersion(CHAINEDMESSAGE)
    newProcotolMessage.setSignature(pm.getSignature)

    val payloadHash = Hash.sha512.digest(pm.getPayload.asText.getBytes())
    newProcotolMessage.setPayload(BinaryNode.valueOf(Base64.getEncoder.encode(payloadHash)))
    newProcotolMessage
  }
}

object Verifier {
  val msgPackProtocolDecoder = MsgPackProtocolDecoder.getDecoder
  def execute(pubKeyAsString: String, pm: ProtocolMessage): Boolean = {
    defaultProtocolVerifier(pubKeyAsString).verify(pm.getUUID, pm.getSigned, 0, pm.getSigned.length, pm.getSignature)
  }

  def execute(pubKeyAsString: String, hardwareId: UUID, msgPack: Array[Byte]): Boolean = {
    val dataToVerifyAndSignature = MsgPackProtocolDecoder.getDecoder.getDataToVerifyAndSignature(msgPack)
    defaultProtocolVerifier(pubKeyAsString).verify(hardwareId, dataToVerifyAndSignature(0), 0, dataToVerifyAndSignature(0).length, dataToVerifyAndSignature(1))
  }

  def defaultProtocolVerifier(pubKeyAsString: String): DefaultProtocolVerifier = {
    new DefaultProtocolVerifier((_: UUID) => {
      val decoder = Base64.getDecoder
      import decoder._
      val key = GeneratorKeyFactory.getPubKey(decode(pubKeyAsString), Curve.Ed25519)
      List(key)
    })
  }
}

object Hash {
  val sha512 = MessageDigest.getInstance("SHA-512")
}